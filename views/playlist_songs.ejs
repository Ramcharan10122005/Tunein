<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Music Dashboard</title>
    <link rel="stylesheet" href="/main.css">
    <link rel="stylesheet" href="/responsive.css">
    <script src="https://unpkg.com/lucide@latest"></script>
    <link href="https://fonts.googleapis.com/css2?family=Pacifico&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            background: #0f0f0f;
            color: white;
            display: flex;
        }

        /* Sidebar */
        .sidebar {
            position: fixed;
            left: 0;
            top: 0;
            width: 250px;
            height: 100%;
            background: #181818;
            transition: transform 0.3s;
            padding-top: 60px;
            transform: translateX(0);
            z-index: 2;
            overflow-y: auto;
        }

        .sidebar.closed {
            transform: translateX(-250px);
        }

        .sidebar ul {
            list-style: none;
            padding: 60px 0 0 0;
            margin: 0;
        }

        .sidebar ul li {
            padding: 15px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 10px;
            color: #b3b3b3;
            margin: 4px 10px;
            border-radius: 8px;
            position: relative;
        }

        .sidebar ul li:hover {
            background: #282828;
            color: white;
        }

        .sidebar ul li:hover svg {
            transform: scale(1.1);
            stroke: white;
        }

        .sidebar ul li svg {
            transition: all 0.2s ease;
        }

        .sidebar ul li.active {
            color: white;
            background: #282828;
        }

        .sidebar ul li.active svg {
            stroke: white;
        }

        /* Add a subtle indicator for the active page */
        .sidebar ul li.active::before {
            content: '';
            position: absolute;
            left: -10px;
            top: 50%;
            transform: translateY(-50%);
            width: 4px;
            height: 20px;
            background: #b62020;
            border-radius: 0 4px 4px 0;
        }

        /* Sidebar playlist items */
        .sidebar-playlists {
            margin-top: 20px;
            padding: 0 15px;
        }

        .sidebar-playlist-item {
            display: flex;
            align-items: center;
            padding: 10px 0;
            cursor: pointer;
        }

        .sidebar-playlist-item img,
        .sidebar-playlist-icon {
            width: 40px;
            height: 40px;
            margin-right: 10px;
            background: #333;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .sidebar-playlist-details {
            overflow: hidden;
        }

        .sidebar-playlist-title {
            font-size: 14px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .sidebar-playlist-subtitle {
            font-size: 12px;
            color: #b3b3b3;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        /* Header and Search Bar */
        header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 15px;
            background: #181818;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            z-index: 3;
            height: 50px;
        }

        .menu-container {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .menu-btn {
            font-size: 24px;
            cursor: pointer;
            background: none;
            border: none;
            color: white;
            margin-left: 20px;
            position: relative;
            z-index: 4;
        }

        .tunein {
            font-size: 20px;
            font-weight: bold;
            color: white;
            margin-left: 20px;
            position: relative;
            z-index: 3;
        }

        .search-container {
            display: flex;
            align-items: center;
            background: #282828;
            padding: 10px;
            border-radius: 25px;
            width: 420px;
        }

        .search-icon {
            color: white;
            margin-left: 10px;
        }

        .search-bar {
            flex-grow: 1;
            padding: 10px;
            border: none;
            outline: none;
            background: transparent;
            color: white;
        }

        /* Profile & Welcome Message */
        .sign-in-box {
            display: flex;
            align-items: center;
            gap: 8px;
            background-color: #b62020;
            /* Red Background */
            padding: 10px 15px;
            border-radius: 6px;
            color: white;
            font-weight: bold;
            font-size: 16px;
            cursor: pointer;
            border: none;
            outline: none;
            transition: background 0.3s ease;
        }

        .sign-in-box:hover {
            background-color: #9e1c1c;
            /* Darker red on hover */
        }

        .sign-in-box svg {
            width: 20px;
            height: 20px;
            stroke: #eeecec;
            /* Light color for the icon */
        }

        /* Main Content */
        .main-content {
            margin-left: 250px;
            padding: 20px;
            flex-grow: 1;
            margin-top: 80px;
            margin-bottom: 80px;
            width: calc(100% - 250px);
            transition: all 0.3s;
        }

        body.sidebar-open .main-content {
            margin-left: 0;
            width: 100%;
        }

        .sidebar.closed+.main-content {
            margin-left: 0;
            width: 100%;
        }

        /* Liked Songs Header */
        .liked-songs-header {
            display: flex;
            align-items: flex-end;
            margin-bottom: 30px;
            padding: 20px;
            background: linear-gradient(to bottom, #4f4f7a, #181818);
            border-radius: 8px;
        }

        .liked-songs-image {
            width: 200px;
            height: 200px;
            background-color: #b62020;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 20px;
            box-shadow: 0 8px 24px rgba(0, 0, 0, 0.5);
        }

        .liked-songs-info {
            display: flex;
            flex-direction: column;
        }

        .liked-songs-info h1 {
            font-size: 42px;
            margin: 0 0 10px 0;
        }

        .liked-songs-info .songs-count {
            font-size: 14px;
            color: #b3b3b3;
            margin-top: 5px;
        }

        .liked-songs-info .username {
            font-size: 16px;
            margin: 10px 0;
        }

        .liked-songs-image svg {
            width: 60px;
            height: 60px;
        }

        /* Songs Table */
        .songs-list-container {
            padding: 0 20px;
        }

        .songs-list {
            width: 100%;
            border-collapse: collapse;
        }

        .songs-list th {
            text-align: left;
            color: #b3b3b3;
            font-weight: normal;
            font-size: 14px;
            padding: 10px 16px;
            border-bottom: 1px solid #333;
        }

        .songs-list td {
            padding: 14px 16px;
            border-bottom: 1px solid #333;
        }

        .songs-list tr:hover {
            background-color: #282828;
        }

        .song-title-info {
            display: flex;
            align-items: center;
        }

        .song-cover {
            width: 40px;
            height: 40px;
            margin-right: 16px;
            background-size: cover;
            background-position: center;
            border-radius: 4px;
            overflow: hidden;
        }

        .song-cover img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .song-details {
            display: flex;
            flex-direction: column;
        }

        .song-title {
            font-weight: bold;
            color: white;
        }

        .song-artist {
            font-size: 14px;
            color: #b3b3b3;
        }

        .duration {
            text-align: right;
            color: #b3b3b3;
        }

        .index-number {
            color: #b3b3b3;
        }

        /* Actions */
        .song-actions {
            position: relative;
        }

        .action-btn {
            background: none;
            border: none;
            color: white;
            cursor: pointer;
            font-size: 20px;
        }

        .action-menu {
            position: absolute;
            right: 0;
            top: 100%;
            background: #282828;
            border-radius: 4px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.5);
            display: none;
            z-index: 10;
            min-width: 200px;
        }

        .song-actions:hover .action-menu {
            display: block;
        }

        .action-menu form {
            width: 100%;
        }

        .action-menu button {
            width: 100%;
            text-align: left;
            padding: 12px 16px;
            border: none;
            background: none;
            color: white;
            cursor: pointer;
            font-size: 14px;
        }

        .action-menu button:hover {
            background: #333;
        }

        /* Full-Width Music Bar */
        .music-controls {
            position: fixed;
            bottom: 0;
            width: 100%;
            background: #181818;
            padding: 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-sizing: border-box;
            z-index: 5;
            border-top: 1px solid #333;
        }

        .track-info {
            display: flex;
            align-items: center;
            flex: 1;
            padding-left: 20px;
            max-width: 300px;
        }

        .track-info svg {
            margin-right: 12px;
        }

        .controls {
            display: flex;
            align-items: center;
            gap: 20px;
        }

        .controls button {
            background: none;
            border: none;
            color: white;
            font-size: 24px;
            cursor: pointer;
        }

        .progress-bar {
            flex: 1;
            height: 5px;
            background: #333;
            border-radius: 5px;
            margin: 0 20px;
            position: relative;
            cursor: pointer;
        }

        .progress-bar span {
            position: absolute;
            height: 100%;
            width: 0%;
            background: #b62020;
            border-radius: 5px;
        }

        .volume-container {
            position: relative;
        }

        .volume-slider {
            position: absolute;
            left: 50%;
            bottom: 40px;
            transform: translateX(-50%);
            display: none;
            width: 24px;
            height: 100px;
            background: #181818;
            border-radius: 12px;
            cursor: pointer;
            padding: 10px 0;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.5);
        }

        .volume-slider input[type="range"] {
            -webkit-appearance: none;
            transform: rotate(-90deg);
            width: 100px;
            height: 4px;
            background: #4d4d4d;
            position: absolute;
            left: -40px;
            top: 48px;
            border-radius: 2px;
        }

        .volume-slider input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 12px;
            height: 12px;
            background: white;
            border-radius: 50%;
            cursor: pointer;
            margin-top: -4px;
        }

        .volume-slider input[type="range"]::-moz-range-thumb {
            width: 12px;
            height: 12px;
            background: white;
            border-radius: 50%;
            cursor: pointer;
            border: none;
            margin-top: -4px;
        }

        .volume-slider input[type="range"]::-webkit-slider-runnable-track {
            height: 4px;
            background: linear-gradient(to right, #b62020 var(--volume-percentage, 50%), #4d4d4d var(--volume-percentage, 50%));
            border-radius: 2px;
        }

        .volume-slider input[type="range"]::-moz-range-track {
            height: 4px;
            background: linear-gradient(to right, #b62020 var(--volume-percentage, 50%), #4d4d4d var(--volume-percentage, 50%));
            border-radius: 2px;
        }

        .date-added {
            color: #b3b3b3;
            font-size: 14px;
        }

        /* No songs message */
        .no-songs {
            padding: 40px;
            text-align: center;
            color: #b3b3b3;
            font-size: 16px;
        }

        .playlist-actions {
            margin-top: 20px;
            display: flex;
            gap: 10px;
        }

        .search-button {
            background: #b62020;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 20px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 8px;
            font-weight: bold;
            transition: background-color 0.2s ease;
        }

        .search-button:hover {
            background: #9e1c1c;
        }

        .search-button i {
            width: 18px;
            height: 18px;
        }

        /* Add styles for disabled buttons */
        .music-controls button[disabled] {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .music-controls button[disabled]:hover {
            transform: none;
        }

        .username-container {
            display: flex;
            align-items: center;
            gap: 6px;
            width: 64px;
            height: 28px;
            padding: 12px 12px;
            padding-top: 0;
            padding-bottom: 0;
            margin-right: 150px;
            color: white;
            font-weight: bold;
            font-size: 10px;
            cursor: pointer;
            border: none;
            outline: none;
            font-size: 20px;
            flex-direction: column;
        }

        .usernam-greet {
            margin-top: -10px;
            color: white;
            font-weight: bold;
        }

        .username-name {
            margin-top: -25px;
            color: red;
            font-family: 'Pacifico', cursive;
            font-weight: bold;
            letter-spacing: 2px;
        }
    </style>
</head>

<body>
    <header>
        <div class="menu-container">
            <button class="menu-btn" id="menu-btn"><i data-lucide="list"></i></button>
            <span class="tunein">Tune In</span>
        </div>
        <div class="search-container">
            <i data-lucide="search" class="search-icon"></i>
            <input type="text" placeholder="Search songs, playlists..." class="search-bar">
        </div>

        <div class="username-container">
            <p class="usernam-greet">Welcome,</p>
            <p class="username-name">
                <%= locals.user %>!
            </p>
        </div>
    </header>

    <div class="sidebar">
        <ul>
            <li>
                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none"
                    stroke="#b62020" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                    class="lucide lucide-house">
                    <path d="M15 21v-8a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1v8" />
                    <path
                        d="M3 10a2 2 0 0 1 .709-1.528l7-5.999a2 2 0 0 1 2.582 0l7 5.999A2 2 0 0 1 21 10v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z" />
                </svg> Home
            </li>
            <li>
                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none"
                    stroke="#b62020" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                    class="lucide lucide-heart">
                    <path
                        d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z" />
                </svg> Liked Songs
            </li>
            <li>
                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none"
                    stroke="#b62020" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                    class="lucide lucide-list-music">
                    <path d="M21 15V6" />
                    <path d="M18.5 18a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5Z" />
                    <path d="M12 12H3" />
                    <path d="M16 6H3" />
                    <path d="M12 18H3" />
                </svg> Playlists
            </li>
            <li>
                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none"
                    stroke="#b62020" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                    class="lucide lucide-smile-plus">
                    <path d="M22 11v1a10 10 0 1 1-9-10" />
                    <path d="M8 14s1.5 2 4 2 4-2 4-2" />
                    <line x1="9" x2="9.01" y1="9" y2="9" />
                    <line x1="15" x2="15.01" y1="9" y2="9" />
                    <path d="M16 5h6" />
                    <path d="M19 2v6" />
                </svg> Mood-based
            </li>
            <li>
                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none"
                    stroke="#b62020" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                    class="lucide lucide-crown">
                    <path
                        d="M11.562 3.266a.5.5 0 0 1 .876 0L15.39 8.87a1 1 0 0 0 1.516.294L21.183 5.5a.5.5 0 0 1 .798.519l-2.834 10.246a1 1 0 0 1-.956.734H5.81a1 1 0 0 1-.957-.734L2.02 6.02a.5.5 0 0 1 .798-.519l4.276 3.664a1 1 0 0 0 1.516-.294z" />
                    <path d="M5 21h14" />
                </svg> Premium
            </li>
            <li>
                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none"
                    stroke="#b62020" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                    class="lucide lucide-user-pen">
                    <path d="M11.5 15H7a4 4 0 0 0-4 4v2" />
                    <path
                        d="M21.378 16.626a1 1 0 0 0-3.004-3.004l-4.01 4.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z" />
                    <circle cx="10" cy="7" r="4" />
                </svg> Profile
            </li>
        </ul>

        <!-- Your playlists section - similar to the image -->
        <div class="sidebar-playlists">
            <% if (typeof userPlaylists !=='undefined' && userPlaylists.length> 0) { %>
                <% userPlaylists.forEach(playlist=> { %>
                    <div class="sidebar-playlist-item">
                        <div class="sidebar-playlist-icon">
                            <i data-lucide="music"></i>
                        </div>
                        <div class="sidebar-playlist-details">
                            <div class="sidebar-playlist-title">
                                <%= playlist.name %>
                            </div>
                            <div class="sidebar-playlist-subtitle">Playlist • <%= playlist.songs.length %> songs</div>
                        </div>
                    </div>
                    <% }); %>
                        <% } %>
        </div>
    </div>

    <div class="main-content">
        <div class="liked-songs-header">
            <div class="liked-songs-image">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
                    stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                    class="lucide lucide-file-music-icon lucide-file-music">
                    <path d="M10.5 22H18a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v8.4" />
                    <path d="M8 18v-7.7L16 9v7" />
                    <circle cx="14" cy="16" r="2" />
                    <circle cx="6" cy="18" r="2" />
                </svg>
            </div>
            <div class="liked-songs-info">
                <h1>
                    <%= playlist.name %>
                </h1> <!-- Display Playlist Name -->
                <% if (playlist.songs.length> 0) { %>
                    <div class="username">
                        <%= playlist.username %> <!-- Display Username Correctly -->
                    </div>
                    <div class="songs-count">
                        <%= playlist.songs.length %> songs
                    </div>
                    <% } else { %>
                        <div class="songs-count">0 songs</div>
                        <% } %>
                            <div class="playlist-actions">
                                <button class="search-button"
                                    onclick="window.location.href='/search-page?playlistId=<%= playlist.id %>&playlistName=<%= encodeURIComponent(playlist.name) %>'">
                                    <i data-lucide="search"></i> Search & Add Songs
                                </button>
                            </div>
            </div>
        </div>

        <div class="songs-list-container">
            <% if (playlist.songs.length> 0) { %>
                <table class="songs-list">
                    <thead>
                        <tr>
                            <th style="width: 50px">#</th>
                            <th>TITLE</th>
                            <th>ALBUM</th>
                            <th>ARTIST</th>
                            <th style="width: 50px"></th>
                        </tr>
                    </thead>
                    <tbody>
                        <% playlist.songs.forEach((song, index)=> { %>
                            <tr
                                onclick="playSong('<%= song.name %>', '<%= song.audio %>', '<%= song.image %>', '<%= song.artist %>')">
                                <td class="index-number">
                                    <%= index + 1 %>
                                </td>
                                <td>
                                    <div class="song-title-info">
                                        <div class="song-cover">
                                            <img src="<%= song.image %>" alt="<%= song.name %>">
                                        </div>
                                        <div class="song-details">
                                            <div class="song-title">
                                                <%= song.name %>
                                            </div>
                                            <div class="song-artist">
                                                <%= song.artist %>
                                            </div>
                                        </div>
                                    </div>
                                </td>
                                <td>Single</td>
                                <td>
                                    <%= song.artist %>
                                </td>
                                <td>
                                    <div class="song-actions">
                                        <button class="action-btn">⋮</button>
                                        <div class="action-menu">
                                            <form action="/remove-from-playlist" method="POST">
                                                <input type="hidden" name="playlistId" value="<%= playlist.id %>">
                                                <input type="hidden" name="songId" value="<%= song.id %>">
                                                <button type="submit">Remove from playlist</button>
                                            </form>
                                        </div>
                                    </div>
                                </td>
                            </tr>
                            <% }); %>
                    </tbody>
                </table>
                <% } else { %>
                    <div class="no-songs">
                        <p>"You haven't added any songs yet. Start exploring and build your perfect playlist!"</p>
                    </div>
                    <% } %>
        </div>
    </div>


    <div class="music-controls">
        <div class="track-info">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
                stroke="#eeecec" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                class="lucide lucide-music">
                <path d="M9 18V5l12-2v13" />
                <circle cx="6" cy="18" r="3" />
                <circle cx="18" cy="16" r="3" />
            </svg>
            <div>
                <div class="song-title" style="font-size: 14px; color: #b3b3b3;">Choose a song</div>
                <div class="song-artist" style="font-size: 12px; color: #b3b3b3;">from the playlist</div>
            </div>
        </div>

        <div class="controls">
            <button id="prev" disabled><i data-lucide="skip-back"></i></button>
            <button id="play-pause" class="play-pause-btn" disabled><i data-lucide="play"></i></button>
            <button id="next" disabled><i data-lucide="skip-forward"></i></button>
        </div>
        <div class="progress-bar">
            <span id="progress"></span>
        </div>
        <div class="controls">
            <button disabled><i data-lucide="heart"></i></button>
            <div class="volume-container">
                <button id="volume-btn" disabled><i data-lucide="volume-2"></i></button>
                <div class="volume-slider" id="volume-slider">
                    <input type="range" min="0" max="100" value="50">
                </div>
            </div>
        </div>
    </div>

    <audio id="audio-player"></audio>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const menuBtn = document.getElementById("menu-btn");
            const sidebar = document.querySelector(".sidebar");
            const body = document.body;
            const audioPlayer = document.getElementById('audio-player');
            const playPauseBtn = document.getElementById('play-pause');
            const progressBar = document.getElementById('progress');
            const volumeBtn = document.getElementById('volume-btn');
            const volumeSlider = document.getElementById('volume-slider');
            const volumeInput = volumeSlider.querySelector('input');
            const progressContainer = document.querySelector('.progress-bar');

            // Add song counter to track plays
            let songsPlayed = 0;

            // Create ad container
            const adContainer = document.createElement('div');
            adContainer.id = 'ad-container';
            adContainer.style.position = 'fixed';
            adContainer.style.top = '0';
            adContainer.style.left = '0';
            adContainer.style.width = '100%';
            adContainer.style.height = '100%';
            adContainer.style.backgroundColor = 'rgba(0, 0, 0, 0.95)';
            adContainer.style.zIndex = '1000';
            adContainer.style.display = 'none'; // Set to 'none' by default
            adContainer.style.justifyContent = 'center';
            adContainer.style.alignItems = 'center';
            adContainer.style.flexDirection = 'column';

            // Add ad content
            const adContent = document.createElement('div');
            adContent.style.textAlign = 'center';
            adContent.style.padding = '20px';
            adContent.innerHTML = `
                <h3 style="color: white; margin-bottom: 10px;">Loading ad...</h3>
                <div class="ad-timer" style="color: #b3b3b3; font-size: 14px;">Ad will end when audio completes</div>
            `;
            adContainer.appendChild(adContent);
            document.body.appendChild(adContainer);

            // Add global function to close ad (does nothing to prevent errors if called elsewhere)
            window.closeAd = function () {
                // This function does nothing to ensure ads can only be closed when audio completes
                console.log("Ad can only be closed when audio completes");
            };

            // Add navigation functionality for sidebar items
            const sidebarItems = sidebar.querySelectorAll('ul li');

            // Function to set active sidebar item based on current URL
            function setActiveSidebarItem() {
                const currentPath = window.location.pathname;
                sidebarItems.forEach((item, index) => {
                    // Remove active class from all items first
                    item.classList.remove('active');

                    // Add active class based on current path
                    switch (currentPath) {
                        case '/':
                            if (index === 0) item.classList.add('active');
                            break;
                        case '/liked-songs':
                            if (index === 1) item.classList.add('active');
                            break;
                        case '/playlists':
                            if (index === 2) item.classList.add('active');
                            break;
                        case '/mood-based':
                            if (index === 3) item.classList.add('active');
                            break;
                        case '/premium':
                            if (index === 4) item.classList.add('active');
                            break;
                        case '/profile':
                            if (index === 5) item.classList.add('active');
                            break;
                    }
                });
            }

            // Set active item on page load
            setActiveSidebarItem();

            sidebarItems.forEach((item, index) => {
                item.addEventListener('click', () => {
                    switch (index) {
                        case 0: // Home
                            window.location.href = '/';
                            break;
                        case 1: // Liked Songs
                            window.location.href = '/liked-songs';
                            break;
                        case 2: // Playlists
                            window.location.href = '/playlists';
                            break;
                        case 3: // Mood-based
                            window.location.href = '/mood-based';
                            break;
                        case 4: // Premium
                            window.location.href = '/premium';
                            break;
                        case 5: // Profile
                            window.location.href = '/profile';
                            break;
                    }
                });

                // Add hover effect styles
                item.style.cursor = 'pointer';
                item.addEventListener('mouseenter', () => {
                    item.style.background = '#282828';
                    item.style.borderRadius = '8px';
                });
                item.addEventListener('mouseleave', () => {
                    item.style.background = 'transparent';
                });
            });

            menuBtn.addEventListener("click", function () {
                sidebar.classList.toggle("closed");
                body.classList.toggle("sidebar-open");
            });

            // Volume control
            volumeBtn.addEventListener('click', () => {
                volumeSlider.style.display = volumeSlider.style.display === 'block' ? 'none' : 'block';
            });

            volumeInput.addEventListener('input', (e) => {
                const value = e.target.value;
                audioPlayer.volume = value / 100;
                // Update the slider background
                volumeInput.style.setProperty('--volume-percentage', `${value}%`);

                // Update volume icon based on level
                const volumeIcon = volumeBtn.querySelector('i');
                if (value == 0) {
                    volumeIcon.setAttribute('data-lucide', 'volume-x');
                } else if (value < 50) {
                    volumeIcon.setAttribute('data-lucide', 'volume-1');
                } else {
                    volumeIcon.setAttribute('data-lucide', 'volume-2');
                }
                lucide.createIcons();
            });

            // Play/Pause control
            playPauseBtn.addEventListener('click', () => {
                if (audioPlayer.paused) {
                    audioPlayer.play();
                    playPauseBtn.innerHTML = '<i data-lucide="pause"></i>';
                } else {
                    audioPlayer.pause();
                    playPauseBtn.innerHTML = '<i data-lucide="play"></i>';
                }
                lucide.createIcons();
            });

            // Progress bar update and click handling
            audioPlayer.addEventListener('timeupdate', () => {
                const progress = (audioPlayer.currentTime / audioPlayer.duration) * 100;
                progressBar.style.width = `${progress}%`;
            });

            // Click on progress bar to seek
            progressContainer.addEventListener('click', (e) => {
                const rect = progressContainer.getBoundingClientRect();
                const pos = (e.clientX - rect.left) / rect.width;
                audioPlayer.currentTime = pos * audioPlayer.duration;
            });

            // Simulate hover effect for song actions
            const actionBtns = document.querySelectorAll('.action-btn');
            actionBtns.forEach(btn => {
                btn.addEventListener('click', (e) => {
                    e.stopPropagation();
                    const menu = btn.nextElementSibling;
                    // Close all other open menus
                    document.querySelectorAll('.action-menu').forEach(menu => {
                        menu.style.display = 'none';
                    });
                    // Toggle this menu
                    menu.style.display = menu.style.display === 'block' ? 'none' : 'block';
                });
            });

            // Close menus when clicking outside
            document.addEventListener('click', () => {
                document.querySelectorAll('.action-menu').forEach(menu => {
                    menu.style.display = 'none';
                });
            });

            // Add styles for disabled buttons
            const style = document.createElement('style');
            style.textContent = `
                .music-controls button[disabled] {
                    opacity: 0.5;
                    cursor: not-allowed;
                }
                .music-controls button[disabled]:hover {
                    transform: none;
                }
            `;
            document.head.appendChild(style);

            lucide.createIcons();
        });

        function playSong(title, audio, image, artist) {
            // Enable all controls when a song is played
            document.querySelectorAll('.music-controls button').forEach(button => {
                button.disabled = false;
            });

            // Update the music player UI
            const trackInfo = document.querySelector('.track-info');
            trackInfo.innerHTML = `
                <div class="song-cover">
                    <img src="${image}" alt="${title}" style="width: 56px; height: 56px; border-radius: 4px;">
                </div>
                <div>
                    <div class="song-title" style="font-size: 14px; color: white;">${title}</div>
                    <div class="song-artist" style="font-size: 12px; color: #b3b3b3;">${artist}</div>
                </div>
            `;

            // Update the audio source and play
            const audioPlayer = document.getElementById('audio-player');
            audioPlayer.src = audio;
            audioPlayer.play();

            // Update play/pause button
            const playPauseBtn = document.getElementById('play-pause');
            playPauseBtn.innerHTML = '<i data-lucide="pause"></i>';
            lucide.createIcons();

            // Notify backend that a song was played
            fetch('/api/song-played', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ title: title })
            })
                .then(response => response.json())
                .then(data => {
                    // Check if we need to show an ad (only after 5 songs have been played)
                    if (data.showAd && data.playedTimes >= 5) {
                        // Pause the audio
                        audioPlayer.pause();

                        // Show the ad
                        const adContainer = document.getElementById('ad-container');
                        const adContent = adContainer.querySelector('div');
                        adContent.innerHTML = `
                        <h3 style="color: white; margin-bottom: 10px;">${data.ad.title}</h3>
                        <img src="${data.ad.image}" alt="${data.ad.title}" style="max-width: 100%; max-height: 150px; margin-bottom: 10px;">
                        <audio id="ad-audio" src="${data.ad.audio}" autoplay></audio>
                        <div class="ad-timer" style="color: #b3b3b3; font-size: 14px;">Ad will end when audio completes</div>
                    `;

                        // Show the ad
                        adContainer.style.display = 'flex';

                        // Add event listener for when ad audio completes
                        const adAudio = document.getElementById('ad-audio');
                        adAudio.addEventListener('ended', function () {
                            // Hide ad and resume song
                            adContainer.style.display = 'none';
                            audioPlayer.play();
                        });
                    }
                })
                .catch(error => {
                    console.error('Error notifying backend about song play:', error);
                });
        }

        function redirecttorand() {
            // Get the current playlist name from the URL or session
            const urlParams = new URLSearchParams(window.location.search);
            const playlistName = urlParams.get('name');
            
            if (!playlistName) {
                console.error('No playlist name found');
                return;
            }

            // Fetch a random song from the playlist using the new endpoint
            fetch(`/playlist-rand?playlist=${encodeURIComponent(playlistName)}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.error) {
                        throw new Error(data.error);
                    }
                    
                    console.log("Song data received:", data);
                    
                    // Play the song using the existing playSong function
                    playSong(data.title, data.audio, data.image, data.artist);
                })
                .catch(error => {
                    console.error("Error fetching song:", error);
                    alert("Error playing song. Please try again.");
                });
        }

        // Add event listeners for next/previous buttons
        document.addEventListener('DOMContentLoaded', function() {
            const nextBtn = document.getElementById('next');
            const prevBtn = document.getElementById('prev');

            nextBtn.addEventListener('click', redirecttorand);
            prevBtn.addEventListener('click', redirecttorand);
        });
    </script>
</body>

</html>