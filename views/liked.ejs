<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Music Dashboard</title>
    <link rel="stylesheet" href="/main.css">
    <link rel="stylesheet" href="/responsive.css">
    <script src="https://unpkg.com/lucide@latest"></script>
    <link href="https://fonts.googleapis.com/css2?family=Pacifico&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            background: #0f0f0f;
            color: white;
            display: flex;
        }

        /* Sidebar */
        .sidebar {
            position: fixed;
            left: 0;
            top: 0;
            width: 250px;
            height: 100%;
            background: #181818;
            transition: transform 0.3s;
            padding-top: 60px;
            transform: translateX(0);
            z-index: 2;
            overflow-y: auto;
        }

        .sidebar.closed {
            transform: translateX(-250px);
        }

        .sidebar ul {
            list-style: none;
            padding: 60px 0 0 0;
            margin: 0;
        }

        .sidebar ul li {
            padding: 15px;
            cursor: pointer;
            transition: background 0.3s;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .sidebar ul li:hover {
            background: #282828;
        }

        /* Sidebar playlist items */
        .sidebar-playlists {
            margin-top: 20px;
            padding: 0 15px;
        }

        .sidebar-playlist-item {
            display: flex;
            align-items: center;
            padding: 10px 0;
            cursor: pointer;
        }

        .sidebar-playlist-item img,
        .sidebar-playlist-icon {
            width: 40px;
            height: 40px;
            margin-right: 10px;
            background: #333;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .sidebar-playlist-details {
            overflow: hidden;
        }

        .sidebar-playlist-title {
            font-size: 14px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .sidebar-playlist-subtitle {
            font-size: 12px;
            color: #b3b3b3;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        /* Header and Search Bar */
        header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 15px;
            background: #181818;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            z-index: 3;
            height: 50px;
        }

        .menu-container {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .menu-btn {
            font-size: 24px;
            cursor: pointer;
            background: none;
            border: none;
            color: white;
            margin-left: 20px;
            position: relative;
            z-index: 4;
        }

        .tunein {
            font-size: 20px;
            font-weight: bold;
            color: white;
            margin-left: 20px;
            position: relative;
            z-index: 3;
        }

        .search-container {
            display: flex;
            align-items: center;
            background: #282828;
            padding: 10px;
            border-radius: 25px;
            width: 420px;
        }

        .search-icon {
            color: white;
            margin-left: 10px;
        }

        .search-bar {
            flex-grow: 1;
            padding: 10px;
            border: none;
            outline: none;
            background: transparent;
            color: white;
        }

        /* Profile & Welcome Message */
        .sign-in-box {
            display: flex;
            align-items: center;
            gap: 8px;
            background-color: #b62020;
            /* Red Background */
            padding: 10px 15px;
            border-radius: 6px;
            color: white;
            font-weight: bold;
            font-size: 16px;
            cursor: pointer;
            border: none;
            outline: none;
            transition: background 0.3s ease;
        }

        .sign-in-box:hover {
            background-color: #9e1c1c;
            /* Darker red on hover */
        }

        .sign-in-box svg {
            width: 20px;
            height: 20px;
            stroke: #eeecec;
            /* Light color for the icon */
        }

        /* Main Content */
        .main-content {
            margin-left: 250px;
            padding: 20px;
            flex-grow: 1;
            margin-top: 80px;
            margin-bottom: 80px;
            width: calc(100% - 250px);
            transition: all 0.3s;
        }

        body.sidebar-open .main-content {
            margin-left: 0;
            width: 100%;
        }

        .sidebar.closed+.main-content {
            margin-left: 0;
            width: 100%;
        }

        /* Liked Songs Header */
        .liked-songs-header {
            display: flex;
            align-items: flex-end;
            margin-bottom: 30px;
            padding: 20px;
            background: linear-gradient(to bottom, #4f4f7a, #181818);
            border-radius: 8px;
        }

        .liked-songs-image {
            width: 200px;
            height: 200px;
            background-color: #b62020;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 20px;
            box-shadow: 0 8px 24px rgba(0, 0, 0, 0.5);
        }

        .liked-songs-info {
            display: flex;
            flex-direction: column;
        }

        .liked-songs-info h1 {
            font-size: 42px;
            margin: 0 0 10px 0;
        }

        .liked-songs-info .songs-count {
            font-size: 14px;
            color: #b3b3b3;
        }

        .liked-songs-info .username {
            font-size: 16px;
            margin: 10px 0;
        }

        /* Songs Table */
        .songs-list-container {
            padding: 0 20px;
        }

        .songs-list {
            width: 100%;
            border-collapse: collapse;
        }

        .songs-list th {
            text-align: left;
            color: #b3b3b3;
            font-weight: normal;
            font-size: 14px;
            padding: 10px 16px;
            border-bottom: 1px solid #333;
        }

        .songs-list td {
            padding: 14px 16px;
            border-bottom: 1px solid #333;
        }

        .songs-list tr:hover {
            background-color: #282828;
        }

        .song-title-info {
            display: flex;
            align-items: center;
        }

        .song-cover {
            width: 40px;
            height: 40px;
            background-size: cover;
            background-position: center;
            margin-right: 16px;
            border-radius: 4px;
        }

        .song-details {
            display: flex;
            flex-direction: column;
            justify-content: center;
        }

        .song-title {
            color: white;
            font-size: 14px;
            margin-bottom: 4px;
        }

        .song-artist {
            color: #b3b3b3;
            font-size: 12px;
        }

        .duration {
            text-align: right;
            color: #b3b3b3;
        }

        .index-number {
            color: #b3b3b3;
        }

        /* Actions */
        .song-actions {
            position: relative;
        }

        .action-btn {
            background: none;
            border: none;
            color: white;
            cursor: pointer;
            font-size: 20px;
        }

        .action-menu {
            position: absolute;
            right: 0;
            top: 100%;
            background: #282828;
            border-radius: 4px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.5);
            display: none;
            z-index: 10;
            min-width: 200px;
        }

        .song-actions:hover .action-menu {
            display: block;
        }

        .action-menu form {
            width: 100%;
        }

        .action-menu button {
            width: 100%;
            text-align: left;
            padding: 12px 16px;
            border: none;
            background: none;
            color: white;
            cursor: pointer;
            font-size: 14px;
        }

        .action-menu button:hover {
            background: #333;
        }

        /* Music Controls */
        .music-controls {
            position: fixed;
            bottom: 0;
            width: 100%;
            background: #181818;
            z-index: 999;
            padding: 16px 24px;
            display: flex;
            align-items: center;
            box-sizing: border-box;
            border-top: 1px solid #333;
            transition: none !important;
            left: 0 !important;
            margin: 0 !important;
            height: 90px;
            gap: 16px;
        }

        .track-info {
            display: flex;
            align-items: center;
            width: 300px;
        }

        .track-info svg {
            width: 38px;
            height: 38px;
            margin-right: 12px;
        }

        #track-name {
            color: #fff;
            font-size: 14px;
            margin-bottom: 4px;
        }

        #artist-name {
            color: #b3b3b3;
            font-size: 12px;
        }

        .controls {
            display: flex;
            align-items: center;
            gap: 32px;
            justify-content: center;
            padding-right: 20px;
        }

        .controls button {
            background: none;
            border: none;
            color: white;
            font-size: 24px;
            cursor: pointer;
        }

        .progress-bar {
            flex: 2;
            height: 6px;
            background: #333;
            border-radius: 5px;
            margin: 0;
            position: relative;
            overflow: hidden;
        }

        .progress-bar span {
            position: absolute;
            height: 100%;
            width: 0%;
            background: #b62020;
            border-radius: 5px;
            transition: width 0.1s linear;
        }

        .volume-slider {
            position: absolute;
            left: -48px;
            bottom: 40px;
            width: 120px;
            height: 4px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 2px;
            transform: rotate(-90deg);
            transform-origin: bottom right;
            display: none;
            z-index: 9999;
            bottom: 100%;
            margin-bottom: 12px;
        }

        .volume-slider::before {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            width: var(--volume-percent, 50%);
            height: 100%;
            background: #b62020;
            border-radius: 2px;
        }

        .volume-slider input[type="range"] {
            -webkit-appearance: none;
            appearance: none;
            width: 100%;
            height: 100%;
            position: absolute;
            left: 0;
            top: 0;
            margin: 0;
            background: transparent;
            cursor: pointer;
            z-index: 10000;
        }

        .volume-slider input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 12px;
            height: 12px;
            background: white;
            border-radius: 50%;
            cursor: pointer;
            border: none;
            margin-top: -4px;
        }

        .volume-slider input[type="range"]::-webkit-slider-runnable-track {
            width: 100%;
            height: 4px;
            background: transparent;
            border: none;
            border-radius: 2px;
        }

        .volume-container {
            position: relative;
            display: flex;
            align-items: center;
            height: 32px;
        }

        .volume-container button {
            background: none;
            border: none;
            color: white;
            cursor: pointer;
            padding: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1;
        }

        .volume-container button:hover {
            color: #fff;
        }

        .volume-container button i {
            width: 20px;
            height: 20px;
        }

        .song-icon {
            width: 50px;
            height: 50px;
            border-radius: 4px;
            object-fit: cover;
            margin-right: 10px;
        }

        body.sidebar-open .music-controls {
            width: 100%;
            margin-left: 0;
            margin-right: 0;
        }

        .like-btn {
            color: #b3b3b3;
            transition: color 0.3s;
        }

        .like-btn[data-liked="true"] {
            color: #b62020;
        }

        .like-btn:hover {
            color: #b62020;
        }

        .date-added {
            color: #b3b3b3;
            font-size: 14px;
        }

        /* No songs message */
        .no-songs {
            padding: 40px;
            text-align: center;
            color: #b3b3b3;
            font-size: 16px;
        }

        .username-container {
            display: flex;
            align-items: center;
            gap: 6px;
            width: 64px;
            height: 28px;
            padding: 12px 12px;
            padding-top: 0;
            padding-bottom: 0;
            margin-right: 150px;
            color: white;
            font-weight: bold;
            font-size: 10px;
            cursor: pointer;
            border: none;
            outline: none;
            font-size: 20px;
            flex-direction: column;
        }

        .usernam-greet {
            margin-top: -10px;
            color: white;
            font-weight: bold;
        }

        .username-name {
            margin-top: -25px;
            color: red;
            font-family: 'Pacifico', cursive;
            font-weight: bold;
            letter-spacing: 2px;
        }

        .ad-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.95);
            z-index: 1000;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .ad-content {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 20px;
            width: 100%;
            height: 100%;
            padding: 20px;
        }

        .ad-image {
            width: 100%;
            height: 80vh;
            object-fit: contain;
            border-radius: 8px;
        }

        .ad-title {
            color: white;
            font-size: 24px;
            font-weight: bold;
            text-align: center;
            margin-top: 20px;
        }

        .ad-timer {
            color: #b3b3b3;
            font-size: 18px;
            text-align: center;
            margin-top: 10px;
        }

        /* Responsive Design */
        @media (max-width: 1024px) {
            .sidebar {
                width: 220px;
            }
            
            .sidebar.closed {
                transform: translateX(-220px);
            }
            
            .main-content {
                margin-left: 220px;
            }
            
            .main-content.sidebar-closed {
                margin-left: 0;
            }
            
            .liked-header {
                padding: 20px;
            }
            
            .liked-title {
                font-size: 24px;
            }
            
            .liked-description {
                font-size: 14px;
            }
            
            .song-item {
                padding: 10px 15px;
            }
            
            .song-number {
                width: 30px;
                font-size: 14px;
            }
            
            .song-title {
                font-size: 14px;
            }
            
            .song-artist {
                font-size: 12px;
            }
            
            .song-duration {
                font-size: 12px;
            }
            
            .song-actions {
                gap: 10px;
            }
            
            .song-actions button {
                width: 35px;
                height: 35px;
            }
            
            .song-actions i {
                width: 18px;
                height: 18px;
            }
        }
        
        @media (max-width: 768px) {
            .sidebar {
                width: 200px;
            }
            
            .sidebar.closed {
                transform: translateX(-200px);
            }
            
            .main-content {
                margin-left: 200px;
            }
            
            .main-content.sidebar-closed {
                margin-left: 0;
            }
            
            .liked-header {
                padding: 15px;
            }
            
            .liked-title {
                font-size: 20px;
            }
            
            .liked-description {
                font-size: 12px;
            }
            
            .song-item {
                padding: 8px 12px;
            }
            
            .song-number {
                width: 25px;
                font-size: 12px;
            }
            
            .song-title {
                font-size: 13px;
            }
            
            .song-artist {
                font-size: 11px;
            }
            
            .song-duration {
                font-size: 11px;
            }
            
            .song-actions {
                gap: 8px;
            }
            
            .song-actions button {
                width: 30px;
                height: 30px;
            }
            
            .song-actions i {
                width: 16px;
                height: 16px;
            }
        }
        
        @media (max-width: 480px) {
            .sidebar {
                width: 100%;
                transform: translateX(-100%);
            }
            
            .sidebar.open {
                transform: translateX(0);
            }
            
            .main-content {
                margin-left: 0;
            }
            
            .toggle-sidebar {
                display: block;
            }
            
            .liked-header {
                padding: 10px;
            }
            
            .liked-title {
                font-size: 18px;
            }
            
            .liked-description {
                font-size: 11px;
            }
            
            .song-item {
                padding: 8px 10px;
            }
            
            .song-number {
                width: 20px;
                font-size: 11px;
            }
            
            .song-title {
                font-size: 12px;
            }
            
            .song-artist {
                font-size: 10px;
            }
            
            .song-duration {
                font-size: 10px;
            }
            
            .song-actions {
                gap: 5px;
            }
            
            .song-actions button {
                width: 25px;
                height: 25px;
            }
            
            .song-actions i {
                width: 14px;
                height: 14px;
            }
        }
    </style>
</head>

<body>
    <header>
        <div class="menu-container">
            <button class="menu-btn" id="menu-btn"><i data-lucide="list"></i></button>
            <span class="tunein">Tune In</span>
        </div>
        <div class="search-container">
            <i data-lucide="search" class="search-icon"></i>
            <input type="text" placeholder="Search songs, playlists..." class="search-bar">
        </div>

        <% if (locals.user) { %>
            <div class="username-container">
                <p class="usernam-greet">Welcome,</p>
                <p class="username-name">
                    <%= locals.user %>!
                </p>
            </div>
            <% } else { %>
                <div class="sign-in-box" onclick="window.location.href='/login'">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
                        stroke="#eeecec" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                        class="lucide lucide-user-round-pen">
                        <path d="M2 21a8 8 0 0 1 10.821-7.487" />
                        <path
                            d="M21.378 16.626a1 1 0 0 0-3.004-3.004l-4.01 4.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z" />
                        <circle cx="10" cy="8" r="5" />
                    </svg>
                    <span>Sign In</span>
                </div>
                <% } %>
    </header>

    <div class="sidebar">
        <ul>
            <li onclick="redirectTo('home')">
                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none"
                    stroke="#b62020" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                    class="lucide lucide-house">
                    <path d="M15 21v-8a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1v8" />
                    <path
                        d="M3 10a2 2 0 0 1 .709-1.528l7-5.999a2 2 0 0 1 2.582 0l7 5.999A2 2 0 0 1 21 10v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z" />
                </svg> Home
            </li onclick="redirectTo('liked-songs')">
            <li>
                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none"
                    stroke="#b62020" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                    class="lucide lucide-heart">
                    <path
                        d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z" />
                </svg> Liked Songs
            </li>
            <li onclick="redirectTo('playlists')">
                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none"
                    stroke="#b62020" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                    class="lucide lucide-list-music">
                    <path d="M21 15V6" />
                    <path d="M18.5 18a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5Z" />
                    <path d="M12 12H3" />
                    <path d="M16 6H3" />
                    <path d="M12 18H3" />
                </svg> Playlists
            </li>
            <li onclick="redirectTo('Mood-based')">
                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none"
                    stroke="#b62020" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                    class="lucide lucide-smile-plus">
                    <path d="M22 11v1a10 10 0 1 1-9-10" />
                    <path d="M8 14s1.5 2 4 2 4-2 4-2" />
                    <line x1="9" x2="9.01" y1="9" y2="9" />
                    <line x1="15" x2="15.01" y1="9" y2="9" />
                    <path d="M16 5h6" />
                    <path d="M19 2v6" />
                </svg> Mood-based
            </li>
            <li onclick="redirectTo('premium')">
                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none"
                    stroke="#b62020" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                    class="lucide lucide-crown">
                    <path
                        d="M11.562 3.266a.5.5 0 0 1 .876 0L15.39 8.87a1 1 0 0 0 1.516.294L21.183 5.5a.5.5 0 0 1 .798.519l-2.834 10.246a1 1 0 0 1-.956.734H5.81a1 1 0 0 1-.957-.734L2.02 6.02a.5.5 0 0 1 .798-.519l4.276 3.664a1 1 0 0 0 1.516-.294z" />
                    <path d="M5 21h14" />
                </svg> Premium
            </li>
            <li onclick="redirectTo('profile')">
                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none"
                    stroke="#b62020" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                    class="lucide lucide-user-pen">
                    <path d="M11.5 15H7a4 4 0 0 0-4 4v2" />
                    <path
                        d="M21.378 16.626a1 1 0 0 0-3.004-3.004l-4.01 4.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z" />
                    <circle cx="10" cy="7" r="4" />
                </svg> Profile
            </li>
        </ul>

        <!-- Your playlists section - similar to the image -->
        <div class="sidebar-playlists">
            <% if (typeof userPlaylists !=='undefined' && userPlaylists.length> 0) { %>
                <% userPlaylists.forEach(playlist=> { %>
                    <div class="sidebar-playlist-item">
                        <div class="sidebar-playlist-icon">
                            <i data-lucide="music"></i>
                        </div>
                        <div class="sidebar-playlist-details">
                            <div class="sidebar-playlist-title">
                                <%= playlist.name %>
                            </div>
                            <div class="sidebar-playlist-subtitle">Playlist • <%= playlist.songs.length %> songs</div>
                        </div>
                    </div>
                    <% }); %>
                        <% } %>
        </div>
    </div>

    <div class="main-content">
        <div class="liked-songs-header">
            <div class="liked-songs-image">
                <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 24 24" fill="none"
                    stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                    class="lucide lucide-heart">
                    <path
                        d="M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z" />
                </svg>
            </div>
            <div class="liked-songs-info">
                <span>PLAYLIST</span>
                <h1>Liked Songs</h1>
                <% const headerUserSongs=likedSongs.filter(song=> song.userId === loggedInUserId); %>
                    <% if (headerUserSongs.length> 0) { %>
                        <div class="username">
                            <%= headerUserSongs[0].username %>
                        </div>
                        <div class="songs-count">
                            <%= headerUserSongs.length %> songs
                        </div>
                        <% } else { %>
                            <div class="songs-count">0 songs</div>
                            <% } %>
            </div>
        </div>

        <div class="songs-list-container">
            <% if (likedSongs && likedSongs.length> 0) { %>
                <table class="songs-list">
                    <thead>
                        <tr>
                            <th style="width: 50px">#</th>
                            <th>TITLE</th>
                            <th>GENRE</th>
                            <th>ARTIST</th>
                            <th>DURATION</th>
                            <th style="width: 50px"></th>
                        </tr>
                    </thead>
                    <tbody>
                        <% likedSongs.forEach((song, index)=> { %>
                            <tr onclick="play('<%= song.title %>')">
                                <td class="index-number">
                                    <%= index + 1 %>
                                </td>
                                <td>
                                    <div class="song-title-info">
                                        <div class="song-cover"
                                            style="background-image: url('<%= song.cover || '' %>'); background-size: cover; background-position: center;">
                                        </div>
                                        <div class="song-details">
                                            <div class="song-title">
                                                <%= song.title %>
                                            </div>
                                            <div class="song-artist">
                                                <%= song.artist %>
                                            </div>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <%= song.genre %>
                                </td>
                                <td class="artist">
                                    <%= song.artist %>
                                </td>
                                <td class="duration">
                                    <%= song.duration %>
                                </td>
                                <td>
                                    <div class="song-actions">
                                        <button class="action-btn">⋮</button>
                                        <div class="action-menu">
                                            <form action="/remove-liked" method="POST">
                                                <input type="hidden" name="songId" value="<%= song.id %>">
                                                <button type="submit">Remove from Liked Songs</button>
                                            </form>
                                        </div>
                                    </div>
                                </td>
                            </tr>
                            <% }); %>
                    </tbody>
                </table>
                <% } else { %>
                    <div class="no-songs">
                        <p>You haven't liked any songs yet. Start exploring and add songs you love!</p>
                    </div>
                    <% } %>
        </div>
    </div>

    <div class="music-controls">
        <div class="track-info">
            <div id="song-image-container">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
                    stroke="#eeecec" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                    class="lucide lucide-music" id="default-music-icon">
                    <path d="M9 18V5l12-2v13" />
                    <circle cx="6" cy="18" r="3" />
                    <circle cx="18" cy="16" r="3" />
                </svg>
                <img src="" alt="Song Image" class="song-icon" id="song-cover" style="display: none;">
            </div>
            <div>
                <div id="track-name">Song Name</div>
                <div id="artist-name" style="font-size: 12px; color: #b3b3b3;">Artist Name</div>
            </div>
        </div>

        <div class="controls">
            <audio id="audio-player">
                <source id="audio-source" src="" type="audio/mpeg">
                Your browser does not support the audio tag.
            </audio>
            <button id="prev" onclick="redirecttorand()"><i data-lucide="skip-back"></i></button>
            <button id="play-pause">
                <i id="play-icon" data-lucide="play"></i>
            </button>
            <button id="next" onclick="redirecttorand()"><i data-lucide="skip-forward"></i></button>
        </div>

        <div class="progress-bar" id="progress-container">
            <span id="progress"></span>
        </div>

        <div class="controls">
            <button class="like-btn" id="like-btn" data-liked="false"><i data-lucide="heart"></i></button>
            <div class="volume-container">
                <button id="volume-btn"><i data-lucide="volume-2"></i></button>
                <div class="volume-slider" id="volume-slider" style="bottom: 140px;left:-100px;">
                    <input type="range" id="volume-input" min="0" max="100" value="50">
                </div>
            </div>
        </div>
    </div>

    <% if (locals.showAd && locals.ad) { %>
    <div class="ad-container" id="adContainer" style="display: block;">
        <div class="ad-content">
            <img src="<%= ad.image %>" alt="Advertisement" class="ad-image">
            <div class="ad-title"><%= ad.title %></div>
            <audio id="ad-audio" src="<%= ad.audio %>" preload="auto" autoplay></audio>
            <div class="ad-timer">Ad will end in <span id="adCountdown">30</span> seconds</div>
        </div>
    </div>
    <% } %>

    <script>
        let audio, playIcon, progressBar, volumeSlider;

        document.addEventListener("DOMContentLoaded", function () {
            const menuBtn = document.getElementById("menu-btn");
            const sidebar = document.querySelector(".sidebar");
            audio = document.getElementById("audio-player");
            const playPauseBtn = document.getElementById("play-pause");
            playIcon = document.getElementById("play-icon");
            progressBar = document.getElementById("progress");
            const progressContainer = document.getElementById("progress-container");
            volumeSlider = document.getElementById("volume-input");
            const volumeBtn = document.getElementById("volume-btn");
            const volumeContainer = document.getElementById("volume-slider");

            // Define closeAd function globally
            window.closeAd = function() {
                console.log("Closing ad automatically");
                if (window.adCountdownInterval) {
                    clearInterval(window.adCountdownInterval);
                }
                
                // Hide the ad container
                const adContainer = document.getElementById('adContainer');
                if (adContainer) {
                    adContainer.style.display = 'none';
                }
                
                // Pause the ad audio
                const adAudio = document.getElementById('ad-audio');
                if (adAudio) {
                    adAudio.pause();
                }
                
                // Resume the main audio and ensure it plays
                if (audio) {
                    console.log("Resuming main audio");
                    
                    // Set the play icon to pause since we're about to play
                    const playIcon = document.getElementById('play-icon');
                    if (playIcon) {
                        playIcon.setAttribute("data-lucide", "pause");
                        lucide.createIcons();
                    }
                    
                    // Force play the audio
                    setTimeout(() => {
                        console.log("Attempting to play main audio after ad");
                        audio.play().then(() => {
                            console.log("Main audio playing successfully after ad");
                        }).catch(error => {
                            console.error("Error playing main audio after ad:", error);
                            // If autoplay fails, try to play on next user interaction
                            document.addEventListener('click', function playOnClick() {
                                console.log("User clicked, trying to play main audio");
                                audio.play().catch(err => {
                                    console.error("Still failed to play main audio:", err);
                                });
                                document.removeEventListener('click', playOnClick);
                            }, { once: true });
                        });
                    }, 500); // Small delay to ensure ad is fully closed
                }
            };

            // Function to handle ad audio playback
            window.handleAdAudio = function(adAudio) {
                if (!adAudio) return;
                
                console.log("Setting up ad audio handling");
                
                // Add event listener for when audio ends
                adAudio.addEventListener('ended', function() {
                    console.log("Ad audio ended naturally, closing ad");
                    window.closeAd();
                });
                
                // Add event listener for when audio is loaded
                adAudio.addEventListener('loadedmetadata', function() {
                    console.log("Ad audio loaded, duration:", adAudio.duration);
                    
                    // Set a timeout to close the ad based on the actual audio duration
                    // Add a small buffer (1 second) to ensure the audio has time to end
                    const durationMs = (adAudio.duration * 1000) + 1000;
                    console.log("Setting timeout to close ad after", durationMs, "ms");
                    
                    setTimeout(function() {
                        console.log("Ad duration timeout reached, closing ad");
                        window.closeAd();
                    }, durationMs);
                });
                
                // Also set a maximum timeout of 35 seconds as a fallback
                setTimeout(function() {
                    console.log("Ad maximum duration timeout reached, closing ad");
                    window.closeAd();
                }, 35000);
            };

            // Initialize ad if present
            console.log("Checking for ad elements...");
            initializeAd();

            // Initialize audio player
            if (audio) {
                // Add event listeners for audio player
                audio.addEventListener("timeupdate", updateProgress);
                audio.addEventListener("ended", () => {
                    playIcon.setAttribute("data-lucide", "play");
                    lucide.createIcons();
                });

                // Initialize volume
                if (volumeSlider) {
                    volumeSlider.addEventListener("input", setVolume);
                    audio.volume = volumeSlider.value / 100;
                }

                // Add click event for progress bar
                progressContainer.addEventListener("click", (e) => {
                    const rect = progressContainer.getBoundingClientRect();
                    const pos = (e.clientX - rect.left) / rect.width;
                    audio.currentTime = pos * audio.duration;
                });

                // Add play/pause button click handler
                playPauseBtn.addEventListener("click", togglePlayPause);
            }

            // Volume slider toggle
            volumeBtn.addEventListener("click", (e) => {
                e.stopPropagation();
                if (volumeSlider.style.display === 'block') {
                    volumeSlider.style.display = 'none';
                } else {
                    volumeSlider.style.display = 'block';
                }
            });

            // Close volume slider when clicking outside
            document.addEventListener('click', (e) => {
                if (!volumeSlider.contains(e.target) && e.target !== volumeBtn) {
                    volumeSlider.style.display = 'none';
                }
            });

            // Prevent clicks on the slider from closing it
            volumeSlider.addEventListener('click', (e) => {
                e.stopPropagation();
            });

            menuBtn.addEventListener("click", function () {
                sidebar.classList.toggle("closed");
            });

            // Simulate hover effect for song actions
            const actionBtns = document.querySelectorAll('.action-btn');
            actionBtns.forEach(btn => {
                btn.addEventListener('click', (e) => {
                    e.stopPropagation();
                    const menu = btn.nextElementSibling;
                    // Close all other open menus
                    document.querySelectorAll('.action-menu').forEach(menu => {
                        menu.style.display = 'none';
                    });
                    // Toggle this menu
                    menu.style.display = menu.style.display === 'block' ? 'none' : 'block';
                });
            });

            // Close menus when clicking outside
            document.addEventListener('click', () => {
                document.querySelectorAll('.action-menu').forEach(menu => {
                    menu.style.display = 'none';
                });
            });

            lucide.createIcons();
        });

        function togglePlayPause() {
            const playIcon = document.getElementById("play-icon");
            if (audio.paused) {
                audio.play().catch(error => {
                    console.error("Error playing audio:", error);
                });
                playIcon.setAttribute("data-lucide", "pause");
            } else {
                audio.pause();
                playIcon.setAttribute("data-lucide", "play");
            }
            lucide.createIcons();
        }

        function updateProgress() {
            if (audio && progressBar) {
                const progress = (audio.currentTime / audio.duration) * 100;
                progressBar.style.width = progress + "%";
            }
        }

        function setVolume() {
            if (audio && volumeSlider) {
                audio.volume = volumeSlider.value / 100;
            }
        }

        function redirectTo(pageName) {
            window.location.href = `/${pageName}`;
        }
        function redirecttorand() {
            // Fetch the song data and update audio player
            fetch(`/rand`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.error) {
                        throw new Error(data.error);
                    }
                    
                    console.log("Song data received:", data);
                    
                    // Update track info
                    document.getElementById("track-name").textContent = data.title;
                    document.getElementById("artist-name").textContent = data.artist;
                    
                    // Update song image and play icon immediately
                    const songIcon = document.getElementById('song-cover');
                    const defaultIcon = document.getElementById('default-music-icon');
                    const playIcon = document.getElementById('play-icon');
                    
                    songIcon.src = data.image;
                    songIcon.alt = data.title;
                    songIcon.style.display = 'block';
                    defaultIcon.style.display = 'none';
                    
                    // Change to pause icon immediately
                    playIcon.setAttribute("data-lucide", "pause");
                    lucide.createIcons();
                    
                    // Update audio source
                    audio.src = data.audio;
                    audio.load();
                    
                    // Handle ad if present
                    if (data.showAd && data.ad) {
                        console.log("Ad should be shown:", data.ad);
                        // Don't start playing the song yet, wait for the ad to finish
                        showAd(data.ad);
                    } else {
                        // Start playing if no ad
                        console.log("No ad to show, starting song playback");
                        audio.play().catch(error => {
                            console.error("Error playing audio:", error);
                            // Reset to play icon if there's an error
                            playIcon.setAttribute("data-lucide", "play");
                            lucide.createIcons();
                        });
                    }
                })
                .catch(error => {
                    console.error("Error fetching song:", error);
                    alert("Error playing song. Please try again.");
                    // Reset to play icon if there's an error
                    const playIcon = document.getElementById('play-icon');
                    playIcon.setAttribute("data-lucide", "play");
                    lucide.createIcons();
                });
        }
        function play(title) {
            console.log("Playing song:", title);
            
            // Get the song details from the clicked row
            const row = event.currentTarget;
            const cover = row.querySelector('.song-cover').style.backgroundImage.slice(4, -1).replace(/"/g, "");
            const songTitle = row.querySelector('.song-title').textContent.trim();
            const artist = row.querySelector('.song-artist').textContent.trim();
            
            // Update track info
            document.getElementById("track-name").textContent = songTitle;
            document.getElementById("artist-name").textContent = artist;
            
            // Update song image and play icon immediately
            const songIcon = document.getElementById('song-cover');
            const defaultIcon = document.getElementById('default-music-icon');
            const playIcon = document.getElementById('play-icon');
            
            songIcon.src = cover;
            songIcon.alt = songTitle;
            songIcon.style.display = 'block';
            defaultIcon.style.display = 'none';
            
            // Change to pause icon immediately
            playIcon.setAttribute("data-lucide", "pause");
            lucide.createIcons();
            
            // Fetch the song data and update audio player
            fetch(`/rand`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.error) {
                        throw new Error(data.error);
                    }
                    
                    console.log("Song data received:", data);
                    
                    // Update audio source
                    audio.src = data.audio;
                    audio.load();
                    
                    // Handle ad if present
                    if (data.showAd && data.ad) {
                        console.log("Ad should be shown:", data.ad);
                        // Don't start playing the song yet, wait for the ad to finish
                        showAd(data.ad);
                    } else {
                        // Start playing if no ad
                        console.log("No ad to show, starting song playback");
                        audio.play().catch(error => {
                            console.error("Error playing audio:", error);
                            // Reset to play icon if there's an error
                            playIcon.setAttribute("data-lucide", "play");
                            lucide.createIcons();
                        });
                    }
                })
                .catch(error => {
                    console.error("Error fetching song:", error);
                    alert("Error playing song. Please try again.");
                    // Reset to play icon if there's an error
                    playIcon.setAttribute("data-lucide", "play");
                    lucide.createIcons();
                });
        }
        function play(title) {
            console.log("Playing song:", title);
            
            // Get the song details from the clicked row
            const row = event.currentTarget;
            const cover = row.querySelector('.song-cover').style.backgroundImage.slice(4, -1).replace(/"/g, "");
            const songTitle = row.querySelector('.song-title').textContent.trim();
            const artist = row.querySelector('.song-artist').textContent.trim();
            
            // Update track info
            document.getElementById("track-name").textContent = songTitle;
            document.getElementById("artist-name").textContent = artist;
            
            // Update song image and play icon immediately
            const songIcon = document.getElementById('song-cover');
            const defaultIcon = document.getElementById('default-music-icon');
            const playIcon = document.getElementById('play-icon');
            
            songIcon.src = cover;
            songIcon.alt = songTitle;
            songIcon.style.display = 'block';
            defaultIcon.style.display = 'none';
            
            // Change to pause icon immediately
            playIcon.setAttribute("data-lucide", "pause");
            lucide.createIcons();
            
            // Fetch the song data and update audio player
            fetch(`/song/${encodeURIComponent(title)}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.error) {
                        throw new Error(data.error);
                    }
                    
                    console.log("Song data received:", data);
                    
                    // Update audio source
                    audio.src = data.audio;
                    audio.load();
                    
                    // Handle ad if present
                    if (data.showAd && data.ad) {
                        console.log("Ad should be shown:", data.ad);
                        // Don't start playing the song yet, wait for the ad to finish
                        showAd(data.ad);
                    } else {
                        // Start playing if no ad
                        console.log("No ad to show, starting song playback");
                        audio.play().catch(error => {
                            console.error("Error playing audio:", error);
                            // Reset to play icon if there's an error
                            playIcon.setAttribute("data-lucide", "play");
                            lucide.createIcons();
                        });
                    }
                })
                .catch(error => {
                    console.error("Error fetching song:", error);
                    alert("Error playing song. Please try again.");
                    // Reset to play icon if there's an error
                    playIcon.setAttribute("data-lucide", "play");
                    lucide.createIcons();
                });
        }

        // Function to initialize ad on page load
        function initializeAd() {
            console.log("Initializing ad...");
            const adContainer = document.getElementById('adContainer');
            const adAudio = document.getElementById('ad-audio');
            const adCountdown = document.getElementById('adCountdown');
            
            console.log("Ad container:", adContainer);
            console.log("Ad audio:", adAudio);
            console.log("Ad countdown:", adCountdown);
            
            if (adContainer && adAudio && adCountdown) {
                console.log('Ad elements found, initializing ad');
                let timeLeft = 30;
                
                // Make sure the ad container is visible
                adContainer.style.display = 'block';
                
                // Force pause any background music
                if (audio) {
                    console.log("Force pausing main audio during ad initialization");
                    audio.pause();
                    audio.currentTime = 0; // Reset the current time
                    console.log("Main audio paused and reset");
                }
                
                // Set volume to match main audio
                if (audio && volumeSlider) {
                    adAudio.volume = audio.volume;
                    console.log("Setting ad audio volume to:", adAudio.volume);
                }
                
                // Set autoplay and remove controls
                adAudio.autoplay = true;
                adAudio.controls = false;
                
                // Ensure ad audio plays
                console.log("Loading ad audio");
                adAudio.load();
                
                // Set up ad audio handling
                window.handleAdAudio(adAudio);
                
                // Force play the ad audio
                console.log("Force playing ad audio");
                setTimeout(() => {
                    adAudio.play().then(() => {
                        console.log("Ad audio playing successfully");
                    }).catch(error => {
                        console.error("Error playing ad audio:", error);
                        // Try playing again after user interaction
                        document.addEventListener('click', function playOnClick() {
                            console.log("User clicked, trying to play ad audio again");
                            adAudio.play().catch(err => {
                                console.error("Still failed to play ad audio:", err);
                            });
                            document.removeEventListener('click', playOnClick);
                        }, { once: true });
                    });
                }, 500);
                
                // Clear any existing interval
                if (window.adCountdownInterval) {
                    clearInterval(window.adCountdownInterval);
                }
                
                // Start the countdown
                window.adCountdownInterval = setInterval(() => {
                    timeLeft--;
                    console.log("Ad countdown:", timeLeft);
                    if (adCountdown) {
                        adCountdown.textContent = timeLeft;
                    }
                    
                    if (timeLeft <= 0) {
                        console.log("Ad countdown reached zero, automatically closing ad");
                        clearInterval(window.adCountdownInterval);
                        window.closeAd();
                    }
                }, 1000);
            } else {
                console.log('Ad elements not found');
            }
        }
        
        // Function to show ad when a song is played
        function showAd(adData) {
            console.log("Showing ad with data:", adData);
            
            // Create ad container if it doesn't exist
            let adContainer = document.getElementById('adContainer');
            if (!adContainer) {
                console.log("Creating new ad container");
                adContainer = document.createElement('div');
                adContainer.id = 'adContainer';
                adContainer.className = 'ad-container';
                document.body.appendChild(adContainer);
            }
            
            // Create ad content
            adContainer.innerHTML = `
                <div class="ad-content">
                    <img src="${adData.image}" alt="Advertisement" class="ad-image">
                    <div class="ad-title">${adData.title}</div>
                    <audio id="ad-audio" src="${adData.audio}" preload="auto"></audio>
                    <div id="adCountdown" class="ad-timer">30</div>
                </div>
            `;
            
            // Get the ad audio element
            const adAudio = document.getElementById('ad-audio');
            const adCountdown = document.getElementById('adCountdown');
            
            // Make the ad container visible
            adContainer.style.display = 'block';
            
            // Pause the main audio
            if (audio) {
                console.log("Pausing main audio for ad");
                audio.pause();
            }
            
            // Set volume to match main audio
            if (audio && volumeSlider) {
                adAudio.volume = audio.volume;
                console.log("Setting ad audio volume to:", adAudio.volume);
            }
            
            // Set autoplay and remove controls
            adAudio.autoplay = true;
            adAudio.controls = false;
            
            // Set up ad audio handling
            window.handleAdAudio(adAudio);
            
            // Force play the ad audio
            console.log("Force playing ad audio");
            setTimeout(() => {
                adAudio.play().then(() => {
                    console.log("Ad audio playing successfully");
                }).catch(error => {
                    console.error("Error playing ad audio:", error);
                    // Try playing again after user interaction
                    document.addEventListener('click', function playOnClick() {
                        console.log("User clicked, trying to play ad audio again");
                        adAudio.play().catch(err => {
                            console.error("Still failed to play ad audio:", err);
                        });
                        document.removeEventListener('click', playOnClick);
                    }, { once: true });
                });
            }, 500);
            
            // Clear any existing interval
            if (window.adCountdownInterval) {
                clearInterval(window.adCountdownInterval);
            }
            
            // Start the countdown
            let timeLeft = 30;
            window.adCountdownInterval = setInterval(() => {
                timeLeft--;
                console.log("Ad countdown:", timeLeft);
                if (adCountdown) {
                    adCountdown.textContent = timeLeft;
                }
                
                if (timeLeft <= 0) {
                    console.log("Ad countdown reached zero, automatically closing ad");
                    clearInterval(window.adCountdownInterval);
                    window.closeAd();
                }
            }, 1000);
        }

        function updateVolumeSlider(value) {
            const slider = document.querySelector('.volume-slider');
            if (slider) {
                slider.style.setProperty('--volume-height', `${value}%`);
            }
        }

        document.addEventListener('DOMContentLoaded', function() {
            const volumeInput = document.getElementById('volume-input');
            if (volumeInput) {
                volumeInput.addEventListener('input', function() {
                    const value = this.value;
                    updateVolumeSlider(value);
                });
            }
        });

        document.addEventListener('DOMContentLoaded', function() {
            const volumeBtn = document.getElementById('volume-btn');
            const volumeSlider = document.getElementById('volume-slider');
            const volumeInput = document.getElementById('volume-input');
            const audio = document.getElementById('audio-player');

            // Initialize volume
            audio.volume = volumeInput.value / 100;
            volumeSlider.style.setProperty('--volume-percent', `${volumeInput.value}%`);

            // Volume slider toggle
            volumeBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                volumeSlider.style.display = volumeSlider.style.display === 'block' ? 'none' : 'block';
            });

            // Update volume on input change
            volumeInput.addEventListener('input', function() {
                const value = this.value;
                audio.volume = value / 100;
                volumeSlider.style.setProperty('--volume-percent', `${value}%`);
            });

            // Close volume slider when clicking outside
            document.addEventListener('click', (e) => {
                if (!volumeSlider.contains(e.target) && e.target !== volumeBtn) {
                    volumeSlider.style.display = 'none';
                }
            });

            // Prevent slider clicks from closing
            volumeSlider.addEventListener('click', (e) => {
                e.stopPropagation();
            });
        });
    </script>
</body>

</html>